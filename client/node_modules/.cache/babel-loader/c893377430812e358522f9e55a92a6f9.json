{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport notifyImg from \"./notify.svg\";\nimport swal from 'sweetalert';\n\nfunction UserAPI(token) {\n  _s();\n\n  const [isLogged, setIsLogged] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [cart, setCart] = useState([]);\n  useEffect(() => {\n    if (token) {\n      const getUser = async () => {\n        try {\n          const res = await axios.get('/user/info', {\n            headers: {\n              Authorization: token\n            }\n          });\n          setIsLogged(true);\n          res.data.role === 1 ? setIsAdmin(true) : setIsAdmin(false);\n          setCart(res.data.cart);\n        } catch (err) {\n          alert(err.response.data.msg);\n        }\n      };\n\n      getUser();\n    }\n  }, [token]);\n\n  const addCart = async product => {\n    if (!isLogged) return swal({\n      title: \"Message from ArvaZon!\",\n      text: \"You must log in in order to continue shopping!\",\n      icon: \"warning\",\n      buttons: true\n    });\n    const check = cart.every(item => {\n      return item._id !== product._id;\n    });\n\n    if (check) {\n      setCart([...cart, { ...product,\n        quantity: 1\n      }]);\n      alert(\"Product has been added to cart\");\n      await axios.patch('/user/addcart', {\n        cart: [...cart, { ...product,\n          quantity: 1\n        }]\n      }, {\n        headers: {\n          Authorization: token\n        }\n      });\n    } else {\n      alert(\"Product is already in the Cart!\");\n    }\n  };\n\n  return {\n    isLogged: [isLogged, setIsLogged],\n    isAdmin: [isAdmin, setIsAdmin],\n    cart: [cart, setCart],\n    addCart: addCart\n  };\n}\n\n_s(UserAPI, \"bRWEenHGuj23AV38AmLORPHuZ9g=\");\n\n_c = UserAPI;\nexport default UserAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAPI\");","map":{"version":3,"sources":["C:/Users/gabry/OneDrive/Desktop/Arvazon/client/src/api/UserAPI.js"],"names":["React","useState","useEffect","axios","swal","UserAPI","token","isLogged","setIsLogged","isAdmin","setIsAdmin","cart","setCart","getUser","res","get","headers","Authorization","data","role","err","alert","response","msg","addCart","product","title","text","icon","buttons","check","every","item","_id","quantity","patch"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,IAAP,MAAiB,YAAjB;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AAEpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGI,KAAH,EAAS;AACL,YAAMO,OAAO,GAAG,YAAY;AACxB,YAAG;AACC,gBAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,YAAV,EAAwB;AACtCC,YAAAA,OAAO,EAAE;AAACC,cAAAA,aAAa,EAAEX;AAAhB;AAD6B,WAAxB,CAAlB;AAIAE,UAAAA,WAAW,CAAC,IAAD,CAAX;AACAM,UAAAA,GAAG,CAACI,IAAJ,CAASC,IAAT,KAAkB,CAAlB,GAAsBT,UAAU,CAAC,IAAD,CAAhC,GAAyCA,UAAU,CAAC,KAAD,CAAnD;AAEAE,UAAAA,OAAO,CAACE,GAAG,CAACI,IAAJ,CAASP,IAAV,CAAP;AAEH,SAVD,CAUC,OAAMS,GAAN,EAAU;AACPC,UAAAA,KAAK,CAACD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,GAAnB,CAAL;AACH;AACJ,OAdD;;AAeAV,MAAAA,OAAO;AACV;AACJ,GAnBQ,EAmBN,CAACP,KAAD,CAnBM,CAAT;;AAsBA,QAAMkB,OAAO,GAAG,MAAOC,OAAP,IAAmB;AAC/B,QAAG,CAAClB,QAAJ,EAAc,OAAOH,IAAI,CAAC;AACtBsB,MAAAA,KAAK,EAAE,uBADe;AAEtBC,MAAAA,IAAI,EAAE,gDAFgB;AAGtBC,MAAAA,IAAI,EAAE,SAHgB;AAItBC,MAAAA,OAAO,EAAE;AAJa,KAAD,CAAX;AAOd,UAAMC,KAAK,GAAGnB,IAAI,CAACoB,KAAL,CAAWC,IAAI,IAAI;AAC7B,aAAOA,IAAI,CAACC,GAAL,KAAaR,OAAO,CAACQ,GAA5B;AACH,KAFa,CAAd;;AAIA,QAAGH,KAAH,EAAS;AACLlB,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,EAAC,GAAGc,OAAJ;AAAaS,QAAAA,QAAQ,EAAE;AAAvB,OAAV,CAAD,CAAP;AACAb,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACA,YAAMlB,KAAK,CAACgC,KAAN,CAAY,eAAZ,EAA6B;AAACxB,QAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ,EAAU,EAAC,GAAGc,OAAJ;AAAaS,UAAAA,QAAQ,EAAE;AAAvB,SAAV;AAAP,OAA7B,EAA0E;AAC5ElB,QAAAA,OAAO,EAAE;AAACC,UAAAA,aAAa,EAAEX;AAAhB;AADmE,OAA1E,CAAN;AAIH,KAPD,MAOK;AACDe,MAAAA,KAAK,CAAC,iCAAD,CAAL;AACH;AAEJ,GAvBD;;AA0BA,SAAO;AACHd,IAAAA,QAAQ,EAAE,CAACA,QAAD,EAAWC,WAAX,CADP;AAEHC,IAAAA,OAAO,EAAE,CAACA,OAAD,EAAUC,UAAV,CAFN;AAGHC,IAAAA,IAAI,EAAE,CAACA,IAAD,EAAOC,OAAP,CAHH;AAIHY,IAAAA,OAAO,EAAEA;AAJN,GAAP;AAMH;;GA5DQnB,O;;KAAAA,O;AA8DT,eAAeA,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport notifyImg from './notify.svg'\r\nimport swal from 'sweetalert';\r\n\r\n\r\nfunction UserAPI(token) {\r\n\r\n    const [isLogged, setIsLogged] = useState(false)\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n    const [cart, setCart] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(token){\r\n            const getUser = async () => {\r\n                try{\r\n                    const res = await axios.get('/user/info', {\r\n                        headers: {Authorization: token}\r\n                    })\r\n\r\n                    setIsLogged(true)\r\n                    res.data.role === 1 ? setIsAdmin(true) : setIsAdmin(false)\r\n\r\n                    setCart(res.data.cart);\r\n\r\n                }catch(err){\r\n                    alert(err.response.data.msg);\r\n                }\r\n            }\r\n            getUser();\r\n        }\r\n    }, [token])\r\n\r\n\r\n    const addCart = async (product) => {\r\n        if(!isLogged) return swal({\r\n            title: \"Message from ArvaZon!\",\r\n            text: \"You must log in in order to continue shopping!\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n          })\r\n\r\n        const check = cart.every(item => {\r\n            return item._id !== product._id;\r\n        })\r\n\r\n        if(check){\r\n            setCart([...cart, {...product, quantity: 1}]);\r\n            alert(\"Product has been added to cart\");\r\n            await axios.patch('/user/addcart', {cart: [...cart, {...product, quantity: 1}]},{\r\n                headers: {Authorization: token}\r\n                \r\n        })\r\n        }else{\r\n            alert(\"Product is already in the Cart!\");    \r\n        }\r\n\r\n    }\r\n\r\n\r\n    return {\r\n        isLogged: [isLogged, setIsLogged],\r\n        isAdmin: [isAdmin, setIsAdmin],\r\n        cart: [cart, setCart],\r\n        addCart: addCart,\r\n    }\r\n}\r\n\r\nexport default UserAPI\r\n"]},"metadata":{},"sourceType":"module"}