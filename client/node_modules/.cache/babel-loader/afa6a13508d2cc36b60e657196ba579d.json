{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport notifyImg from \"./notify.svg\";\nimport swal from 'sweetalert';\n\nfunction UserAPI(token) {\n  _s();\n\n  const [isLogged, setIsLogged] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [cart, setCart] = useState([]);\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    if (token) {\n      const getUser = async () => {\n        try {\n          const res = await axios.get('/user/info', {\n            headers: {\n              Authorization: token\n            }\n          });\n          setIsLogged(true);\n          res.data.role === 1 ? setIsAdmin(true) : setIsAdmin(false);\n          setCart(res.data.cart);\n        } catch (err) {\n          alert(err.response.data.msg);\n        }\n      };\n\n      getUser();\n    }\n  }, [token]);\n  useEffect(() => {\n    if (token) {\n      const getHistory = async () => {\n        const res = await axios.get('/user/history', {\n          headers: {\n            Authorization: token\n          }\n        });\n        setHistory(res.data);\n      };\n\n      getHistory();\n    }\n  }, [token]);\n\n  const addCart = async product => {\n    if (!isLogged) return swal({\n      title: \"Message from ArvaZon!\",\n      text: \"You must log in in order to continue shopping!\",\n      icon: \"warning\",\n      button: true\n    });\n    const check = cart.every(item => {\n      return item._id !== product._id;\n    });\n\n    if (check) {\n      setCart([...cart, { ...product,\n        quantity: 1\n      }]);\n      swal({\n        title: \"Message from ArvaZon!\",\n        text: \"Product has been added to cart!\",\n        icon: \"success\",\n        button: true\n      });\n      await axios.patch('/user/addcart', {\n        cart: [...cart, { ...product,\n          quantity: 1\n        }]\n      }, {\n        headers: {\n          Authorization: token\n        }\n      });\n    } else {\n      swal({\n        title: \"Message from ArvaZon!\",\n        text: \"Product is already in the cart!\",\n        icon: \"success\",\n        button: true,\n        dangerMode: false\n      });\n    }\n  };\n\n  return {\n    isLogged: [isLogged, setIsLogged],\n    isAdmin: [isAdmin, setIsAdmin],\n    cart: [cart, setCart],\n    addCart: addCart\n  };\n}\n\n_s(UserAPI, \"uZ+AyAeE98XuHy0wOObw3zrE0zM=\");\n\n_c = UserAPI;\nexport default UserAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAPI\");","map":{"version":3,"sources":["C:/Users/gabry/OneDrive/Desktop/Arvazon/client/src/api/UserAPI.js"],"names":["React","useState","useEffect","axios","swal","UserAPI","token","isLogged","setIsLogged","isAdmin","setIsAdmin","cart","setCart","history","setHistory","getUser","res","get","headers","Authorization","data","role","err","alert","response","msg","getHistory","addCart","product","title","text","icon","button","check","every","item","_id","quantity","patch","dangerMode"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport notifyImg from './notify.svg'\r\nimport swal from 'sweetalert';\r\n\r\n\r\nfunction UserAPI(token) {\r\n\r\n    const [isLogged, setIsLogged] = useState(false)\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n    const [cart, setCart] = useState([])\r\n    const [history, setHistory] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(token){\r\n            const getUser = async () => {\r\n                try{\r\n                    const res = await axios.get('/user/info', {\r\n                        headers: {Authorization: token}\r\n                    })\r\n\r\n                    setIsLogged(true)\r\n                    res.data.role === 1 ? setIsAdmin(true) : setIsAdmin(false)\r\n\r\n                    setCart(res.data.cart);\r\n\r\n                }catch(err){\r\n                    alert(err.response.data.msg);\r\n                }\r\n            }\r\n            getUser();\r\n        }\r\n    }, [token])\r\n\r\n    useEffect(() =>{\r\n        if(token){\r\n            const getHistory = async () => {\r\n                const res = await axios.get('/user/history', {\r\n                    headers: {Authorization: token}\r\n                })\r\n               setHistory(res.data)\r\n            }\r\n            getHistory()\r\n        }\r\n    }, [token])\r\n\r\n\r\n    const addCart = async (product) => {\r\n        if(!isLogged) return swal({\r\n            title: \"Message from ArvaZon!\",\r\n            text: \"You must log in in order to continue shopping!\",\r\n            icon: \"warning\",\r\n            button: true,\r\n          })\r\n\r\n        const check = cart.every(item => {\r\n            return item._id !== product._id;\r\n        })\r\n\r\n        if(check){\r\n            setCart([...cart, {...product, quantity: 1}]);\r\n            swal({\r\n                title: \"Message from ArvaZon!\",\r\n                text: \"Product has been added to cart!\",\r\n                icon: \"success\",\r\n                button: true,\r\n              })\r\n            await axios.patch('/user/addcart', {cart: [...cart, {...product, quantity: 1}]},{\r\n                headers: {Authorization: token}\r\n                \r\n        })\r\n        }else{\r\n            swal({\r\n                title: \"Message from ArvaZon!\",\r\n                text: \"Product is already in the cart!\",\r\n                icon: \"success\",\r\n                button: true,\r\n                dangerMode: false\r\n              })    \r\n        }\r\n\r\n    }\r\n\r\n\r\n    return {\r\n        isLogged: [isLogged, setIsLogged],\r\n        isAdmin: [isAdmin, setIsAdmin],\r\n        cart: [cart, setCart],\r\n        addCart: addCart,\r\n    }\r\n}\r\n\r\nexport default UserAPI\r\n"]},"metadata":{},"sourceType":"module"}